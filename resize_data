#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 14 11:38:40 2017

@author: nicki
"""

import h5py
from scipy.ndimage.interpolation import zoom
import sys
#%%
def zoom_img(img):
    return zoom(img, (0.5, 0.5, 1), order = 3)
#%%
def progressBar(value, endvalue, bar_length=20):
    percent = float(value) / endvalue
    arrow = '-' * int(round(percent * bar_length)-1) + '>'
    spaces = ' ' * (bar_length - len(arrow))

    sys.stdout.write("\rPercent: [{0}] {1}%".format(arrow + spaces, int(round(percent * 100))))
    sys.stdout.flush()

#%%
if __name__ == '__main__':
    #%% No augmentation
    print('No augmentation')
    for i in range(10):
        progressBar(i, 9)
        h5f_old = h5py.File('datasets/lfw_0/lfw_augment_no_cv_' + str(i) + '.h5', 'r')
        h5f_new = h5py.File('datasets/lfw_0_down/lfw_augment_no_cv_' + str(i) + '.h5', 'w')
        
        N_train = h5f_old['X_train'].shape[0]
        N_test = h5f_old['X_test'].shape[0]
        
        h5f_new.create_dataset('X_train', (N_train, 2, 125, 125, 3), dtype = 'uint8')
        h5f_new.create_dataset('y_train', (N_train, ), dtype = 'uint8')
        h5f_new.create_dataset('X_test', (N_test, 2, 125, 125, 3), dtype = 'uint8')
        h5f_new.create_dataset('y_test', (N_test, ), dtype = 'uint8')
        
        for j in range(N_train):
            h5f_new['X_train'][j,0] = zoom_img(h5f_old['X_train'][j,0])
            h5f_new['X_train'][j,1] = zoom_img(h5f_old['X_train'][j,1])
            h5f_new['y_train'][j] = h5f_old['y_train'][j]
            
        for j in range(N_test):
            h5f_new['X_test'][j,0] = zoom_img(h5f_old['X_test'][j,0])
            h5f_new['X_test'][j,1] = zoom_img(h5f_old['X_test'][j,1])
            h5f_new['y_test'][j] = h5f_old['y_test'][j]
            
        h5f_old.close()
        h5f_new.close()
        
    #%% Normal augmentation
    print('Normal augmentation')
    for i in range(10):
        progressBar(i, 9)
        h5f_old = h5py.File('datasets/lfw_1/lfw_augment_normal_cv_' + str(i) + '.h5', 'r')
        h5f_new = h5py.File('datasets/lfw_1_down/lfw_augment_normal_cv_' + str(i) + '.h5', 'w')
        
        N_train = h5f_old['X_train'].shape[0]
        N_test = h5f_old['X_test'].shape[0]
        
        h5f_new.create_dataset('X_train', (N_train, 2, 125, 125, 3), dtype = 'uint8')
        h5f_new.create_dataset('y_train', (N_train, ), dtype = 'uint8')
        h5f_new.create_dataset('X_test', (N_test, 2, 125, 125, 3), dtype = 'uint8')
        h5f_new.create_dataset('y_test', (N_test, ), dtype = 'uint8')
        
        for j in range(N_train):
            h5f_new['X_train'][j,0] = zoom_img(h5f_old['X_train'][j,0])
            h5f_new['X_train'][j,1] = zoom_img(h5f_old['X_train'][j,1])
            h5f_new['y_train'][j] = h5f_old['y_train'][j]
            
        for j in range(N_test):
            h5f_new['X_test'][j,0] = zoom_img(h5f_old['X_test'][j,0])
            h5f_new['X_test'][j,1] = zoom_img(h5f_old['X_test'][j,1])
            h5f_new['y_test'][j] = h5f_old['y_test'][j]
            
        h5f_old.close()
        h5f_new.close()
    #%% CPAB augmentation
    print('CPAB augmentation')
    for i in range(10):
        progressBar(i, 9)
        h5f_old = h5py.File('datasets/lfw_2/lfw_augment_cpab_cv_' + str(i) + '.h5', 'r')
        h5f_new = h5py.File('datasets/lfw_2_down/lfw_augment_cpab_cv_' + str(i) + '.h5', 'w')
        
        N_train = h5f_old['X_train'].shape[0]
        N_test = h5f_old['X_test'].shape[0]
        
        h5f_new.create_dataset('X_train', (N_train, 2, 125, 125, 3), dtype = 'uint8')
        h5f_new.create_dataset('y_train', (N_train, ), dtype = 'uint8')
        h5f_new.create_dataset('X_test', (N_test, 2, 125, 125, 3), dtype = 'uint8')
        h5f_new.create_dataset('y_test', (N_test, ), dtype = 'uint8')
        
        for j in range(N_train):
            h5f_new['X_train'][j,0] = zoom_img(h5f_old['X_train'][j,0])
            h5f_new['X_train'][j,1] = zoom_img(h5f_old['X_train'][j,1])
            h5f_new['y_train'][j] = h5f_old['y_train'][j]
            
        for j in range(N_test):
            h5f_new['X_test'][j,0] = zoom_img(h5f_old['X_test'][j,0])
            h5f_new['X_test'][j,1] = zoom_img(h5f_old['X_test'][j,1])
            h5f_new['y_test'][j] = h5f_old['y_test'][j]
            
        h5f_old.close()
        h5f_new.close()